设置hostname
vi /etc/hostname
reboot

添加虚拟网卡：
vim /etc/sysconfig/network-scripts/ifcfg-eth0:1

# 填入内容
NAME=eth0:1
DEVICE=eth0:1
TYPE=Ethernet
ONBOOT=yes
BOOTPROTO=static
NETMASK=255.255.255.0
IPADDR=<public ip>

# 重启网络
systemctl restart network.service

关闭SELINUX：
setenforce 0
sed -ri 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

设置跳转允许：
modprobe br_netfilter
cat > /etc/sysctl.d/k8s.conf << EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
vm.swappiness = 0
EOF

sysctl -p /etc/sysctl.d/k8s.conf

关闭SWAP分区：
swapoff -a
sed -i 's/.*swap.*/#&/g' /etc/fstab

安装docker， containerd
--安装yumconfig 工具：
yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2
--配置docker repo
yum-config-manager \
    --add-repo \
    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
--安装docker  containerd.io
yum install docker-ce docker-ce-cli docker-compose-plugin -y
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.10/cri-dockerd-0.3.10-3.el7.x86_64.rpm

rpm -ivh cri-dockerd-0.3.10-3.el7.x86_64.rpm

vi /usr/lib/systemd/system/cri-docker.service

ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9

systemctl daemon-reload
systemctl enable cri-docker

--设置开机自启动
systemctl enable docker
--配置containerd
containerd config default > /etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sed -i 's/registry.k8s.io/registry.aliyuncs.com\/google_containers/' /etc/containerd/config.toml
--重启containerd
systemctl restart containerd
--配置docker 阿里镜像源
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://ah0vbq3i.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker

配置kubernetes.repo
cat > /etc/yum.repos.d/kubernetes.repo << EOF
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
安装
 yum install -y kubelet kubeadm kubectl

修改cgroups：
#vim /etc/sysconfig/kubelet
KUBELET_EXTRA_ARGS="--container-runtime-endpoint=/var/run/cri-dockerd.sock --cgroup-driver=systemd --node-ip=172.16.0.3"

设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动
# systemctl enable kubelet

systemctl start cri-docker
master:
安装etcd：
wget https://github.com/kubernetes-sigs/etcdadm/releases/download/v0.1.5/etcdadm-linux-amd64 --no-check-certificate
chmod +x etcdadm-linux-amd64
mv etcdadm-linux-amd64 /usr/bin/etcdadm
etcdadm init --name master --server-cert-extra-sans 公网ip --version 3.5.12
/opt/bin/etcdctl.sh endpoint health

加载etcd环境变量
source /etc/etcd/etcdctl.env



-- 获取初始化配置
kubeadm config print init-defaults > init-default.yaml
cp init-default.yaml init.yaml
修改init.yaml（查看init.yaml 文件）

kubeadm init --config init.yaml --upload-certs

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

node执行：
kubeadm join 122.51.3.28:6443 --token xxx \
        --discovery-token-ca-cert-hash sha256: \
        --cri-socket unix:///var/run/cri-dockerd.sock

master执行 kubectl get nodes， 节点出于 NotReady， 没有安装CNI，本文使用CNI flannel
```

kubectl annotate node node flannel.alpha.coreos.com/public-ip-overwrite=公网ip
kubectl annotate node node1 flannel.alpha.coreos.com/public-ip-overwrite=公网ip
kubectl annotate node node2 flannel.alpha.coreos.com/public-ip-overwrite=公网ip
kubectl annotate node node3 flannel.alpha.coreos.com/public-ip-overwrite=公网ip

wget –no-check-certificate https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
修改1： 添加 --public-ip=$(PUBLIC_IP)，--iface=eth0：
      containers:
      - name: kube-flannel
        image: docker.io/flannel/flannel:v0.24.2
        command:
        - /opt/bin/flanneld
        args:
        - --public-ip=$(PUBLIC_IP)
        - --iface=eth0
        - --ip-masq
        - --kube-subnet-mgr

 修改2： 添加参数PUBLIC_IP：
        env:
        - name: PUBLIC_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
kubectl apply -f kube-flannel.yml






