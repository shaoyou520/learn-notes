apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cm
  labels:
    app: redis
data:
  redis.conf: |+
    bind 0.0.0.0
    port 6379
    daemonize yes
    pidfile "/opt/redis-7.4.0/datas/redis_{NUMBET}/redis.pid"
    logfile "/opt/redis-7.4.0/datas/redis_{NUMBET}/redis.log"
    databases 16
    dir "/opt/redis-7.4.0/datas/redis_{NUMBET}/data"
    
    #replicaof 192.168.182.110 6379
    masterauth "123456"
    cluster-announce-ip {{ master_ip }}
    cluster-announce-port 3037{NUMBET}
    cluster-announce-bus-port 3137{NUMBET}
    cluster-require-full-coverage no
    requirepass "123456"
    appendonly yes
    # 开启集群模式
    cluster-enabled yes
    # 虽然此配置的名字叫"集群配置文件"，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。
    cluster-config-file /opt/redis-7.4.0/datas/redis_{NUMBET}/nodes.conf
    cluster-node-timeout 15000

  start.sh: |+
    #!/bin/bash
    IS_INSTALLED=0
    
    env_init() {
      HOSTNAME="$(hostname -s)"
      if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
        NUMBET=${BASH_REMATCH[2]}
        CLUSTER_CONFIG="${REDIS_HOME}/datas/redis_${NUMBET}/nodes.conf"
        node_conf_bak=${CLUSTER_CONFIG}.bak
    
        if [ -f ${CLUSTER_CONFIG} ]; then
          IS_INSTALLED=1
        else
          mkdir -p ${REDIS_HOME}/datas/redis_${NUMBET}/data 
        fi
      else
        echo "Failed to get index from hostname $HOSTNAME"
        exit 1
      fi
    }

    update_redis_config() {
      cp ${REDIS_HOME}/redis.conf ${REDIS_HOME}/redis_new.conf
      sed -i 's/{NUMBET}/'${NUMBET}'/g' ${REDIS_HOME}/redis_new.conf
      sed -i 's/{NODEIP}/'${NODE_IP}'/g' ${REDIS_HOME}/redis_new.conf
    }
    
    update_redis_cluster_ip() {
      if [ $IS_INSTALLED = 1 ]; then
        if [ $NUMBET < 5 ]; then
          sed -i '/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'${POD_IP}'/' ${CLUSTER_CONFIG}
        else
          echo "cluster restart"
          get_node_ips
          echo y | cp $node_conf_bak nodes_new.conf
          sed -i 's/{node0}/'${node0}'/g' nodes_new.conf
          sed -i 's/{node1}/'${node1}'/g' nodes_new.conf
          sed -i 's/{node2}/'${node2}'/g' nodes_new.conf
          sed -i 's/{node3}/'${node3}'/g' nodes_new.conf
          sed -i 's/{node4}/'${node4}'/g' nodes_new.conf
          sed -i 's/{node5}/'${node5}'/g' nodes_new.conf
          echo y | cp nodes_new.conf $CLUSTER_CONFIG
        fi
      fi
    }
    
    get_node_ips() {
      node0=`dig +short redis-0.redis-svc.default.svc.cluster.local`
      node1=`dig +short redis-1.redis-svc.default.svc.cluster.local`
      node2=`dig +short redis-2.redis-svc.default.svc.cluster.local`
      node3=`dig +short redis-3.redis-svc.default.svc.cluster.local`
      node4=`dig +short redis-4.redis-svc.default.svc.cluster.local`
      node5=${POD_IP}
    }

    cluster_init() {
      if [ $NUMBET = 5 ] && [ $IS_INSTALLED = 0 ]; then
        get_node_ips
        sleep 20s
        echo " init cluster"
        node="122.51.3.28"
        echo 'yes' | redis-cli --cluster create ${node}:30370 ${node}:30371 \
        ${node}:30372 ${node}:30373 ${node}:30374 ${node}:30375 \
        --cluster-replicas 1 -a 123456
        cp $CLUSTER_CONFIG $node_conf_bak
        sed -i 's/'${node0}'/{node0}/g' $node_conf_bak
        sed -i 's/'${node1}'/{node1}/g' $node_conf_bak
        sed -i 's/'${node2}'/{node2}/g' $node_conf_bak
        sed -i 's/'${node3}'/{node3}/g' $node_conf_bak
        sed -i 's/'${node4}'/{node4}/g' $node_conf_bak
        sed -i 's/'${node5}'/{node5}/g' $node_conf_bak
      else
        echo "not end node"
      fi
    }
    env_init
    update_redis_config
    update_redis_cluster_ip
    redis-server ${REDIS_HOME}/redis_new.conf
    cluster_init
    tail -f ${REDIS_HOME}/datas/redis_${NUMBET}/redis.log

---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: redis0-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30370
  - port: 16379
    name: bus-port
    nodePort: 31370
  selector:
    statefulset.kubernetes.io/pod-name: redis-0

---
apiVersion: v1
kind: Service
metadata:
  name: redis1-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30371
  - port: 16379
    name: bus-port
    nodePort: 31371
  selector:
    statefulset.kubernetes.io/pod-name: redis-1

---
apiVersion: v1
kind: Service
metadata:
  name: redis2-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30372
  - port: 16379
    name: bus-port
    nodePort: 31372
  selector:
    statefulset.kubernetes.io/pod-name: redis-2

---
apiVersion: v1
kind: Service
metadata:
  name: redis3-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30373
  - port: 16379
    name: bus-port
    nodePort: 31373
  selector:
    statefulset.kubernetes.io/pod-name: redis-3

---
apiVersion: v1
kind: Service
metadata:
  name: redis4-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30374
  - port: 16379
    name: bus-port
    nodePort: 31374
  selector:
    statefulset.kubernetes.io/pod-name: redis-4

---
apiVersion: v1
kind: Service
metadata:
  name: redis5-svc
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    name: client-port
    nodePort: 30375
  - port: 16379
    name: bus-port
    nodePort: 31375
  selector:
    statefulset.kubernetes.io/pod-name: redis-5

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis-svc
  replicas: 6
  template:
    metadata:
      labels:
        app: redis
    spec:
      # 出去service的环境变量
      enableServiceLinks: false
      containers:
      - name: redis
        image: "qtdocker/redis:7.4.0-amd64"
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c", "bash ${REDIS_HOME}/start.sh"]
        #        lifecycle:
        #          postStart:
        #            exec:
        #              command: ["/bin/bash", "-c", "/opt/add-cluster.sh"]
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: redis-config
          mountPath: /opt/redis-7.4.0/redis.conf
          subPath: redis.conf
        - name: redis-start
          mountPath: /opt/redis-7.4.0/start.sh
          subPath: start.sh
        - name: redis-data
          mountPath: /opt/redis-7.4.0/datas
      volumes:
      - name: redis-config
        configMap:
          name: redis-cm
          items:
            - key: "redis.conf"
              path: "redis.conf"
      - name: redis-data
        hostPath:
          path: /opt/redis/data
      - name: redis-start
        configMap:
          name: redis-cm
          items:
            - key: "start.sh"
              path: "start.sh"


